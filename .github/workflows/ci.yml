name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rival_outranker_test
  JWT_SECRET: test-jwt-secret-key-for-ci
  SESSION_SECRET: test-session-secret-for-ci
  LOG_LEVEL: error

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rival_outranker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npm run check

    - name: Run linting
      run: npm run lint
      continue-on-error: true

    - name: Setup test database
      run: |
        npm run db:push
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run unit tests
      run: npm run test:unit -- --coverage

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rival_outranker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Setup test database
      run: npm run db:push
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Build application
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        BASE_URL: http://localhost:5173

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency vulnerability scan
      run: npx audit-ci --moderate

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  load-testing:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, e2e-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rival_outranker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: npm run db:push
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Build and start application
      run: |
        npm run build
        npm start &
        sleep 30  # Wait for application to start
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run load tests
      run: k6 run tests/load/api-load.test.js
      env:
        API_BASE_URL: http://localhost:3000

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: load-test-results/

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, e2e-tests, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run post-build tests
      run: npm run test:build

    - name: Deploy to staging
      if: success()
      run: echo "Deploy to staging environment"
      # Add actual deployment commands here

    - name: Run smoke tests
      if: success()
      run: npm run test:smoke
      env:
        STAGING_URL: https://staging.rivaloutranker.com

    - name: Deploy to production
      if: success()
      run: echo "Deploy to production environment"
      # Add actual production deployment commands here

    - name: Notify deployment
      if: always()
      run: echo "Send deployment notification"
      # Add notification logic (Slack, email, etc.)

  monitor-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Monitor application health
      run: |
        sleep 60  # Wait for deployment to complete
        curl -f https://rivaloutranker.com/api/health || exit 1

    - name: Run post-deployment tests
      run: npm run test:production
      env:
        PRODUCTION_URL: https://rivaloutranker.com

    - name: Alert on failure
      if: failure()
      run: echo "Send failure alert"
      # Add alerting logic